#!/usr/bin/env bash
#
# Fatpub-SVG-Convert â€“ Converts all X.svg in INDIR into the specified output format. (X.svg -> X.svg.png)
# Copyright (C) 2023 Henning Schwentner
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Terminal colors
TEXT_RED='\e[31m'
TEXT_GREEN='\e[32m'
TEXT_YELLOW='\e[33m'
TEXT_BLUE='\e[34m'
TEXT_DARKGRAY='\e[90m'

TEXT_BOLD='\e[1m'

TEXT_NORMAL='\e[0m' # No Color, no formatting


INFO="${TEXT_BOLD}${TEXT_BLUE}INFO:${TEXT_NORMAL}"
WARN="${TEXT_BOLD}${TEXT_YELLOW}WARNING:${TEXT_NORMAL}"
ERROR="${TEXT_BOLD}${TEXT_RED}ERROR:${TEXT_NORMAL}"


IFS='' read -r -d '' SCRIPT_USAGE <<EOF
  usage:  $0 [-h/--help | -o|--output-directory <output directory> -f|--output-format <output format> --dpi <dpi> --parallel <bool> <input directory>]
   e.g.:  $0 --output-directory tmp/imgages --output-format png --dpi 900 --parallel true manuscript/images
options:
                                   -h/--help  print this help string
    -o|--output-directory <output directory>  the directory where the converted files should be stored
          -f|--output-format <output format>  the format the SVG files should be converted to. Possible values: png eps
                                 --dpi <dpi>  the dots per inch. Typical values: 600 900
                           --parallel <bool>  if the files should be converted in parallel or one after the other. Possible values: true false
EOF

set -e
set -u
set -o pipefail

# Enable job control
set -m

# Ignore empty directories
shopt -s nullglob


# Use headless X server on Linux
if [[ "$OSTYPE" == "darwin"* ]]; then
    DRAWIO='drawio'
else
    DRAWIO='xvfb-run -a drawio'

# In a Docker container we need something like this:
#    DRAWIO="${DRAWIO} --no-sandbox"
#    mkdir -p /var/run/dbus
#    dbus-daemon --config-file=/usr/share/dbus-1/system.conf --print-address
fi


# Parse arguments
POSITIONAL_ARGS=()

while [[ $# -gt 0 ]]; do
  case $1 in
    -h|--help)
      echo "${SCRIPT_USAGE}"
      exit 0
      ;;
    -o|--output-directory)
      OUTDIR="$2"
      shift # past argument
      shift # past value
      ;;
    -f|--output-format)
      OUTPUTFORMAT="$2"
      shift # past argument
      shift # past value
      ;;
    --dpi)
      DPI="$2"
      shift # past argument
      shift # past value
      ;;
    --parallel)
      PARALLEL="$2"
      shift # past argument
      shift # past value
      ;;
    -*|--*)
      echo "Unknown option $1"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

INDIR="$1"


# Check params and args
[[ $# > 1 ]] && echo "Too many arguments." && exit 1

[[ ${INDIR} == '' ]] && echo "Please specify an input directory." && exit 1
[ ! -d "$INDIR" ] && echo "Input directory $INDIR does not exist." && exit 1

[[ ${OUTDIR} == '' ]] && echo "Please specify an output directory." && exit 1

[[ ${OUTPUTFORMAT} == '' ]] && echo "Please specify an output format like png or eps." && exit 1

[[ ${DPI} == '' ]] && echo "Please specify the output DPI." && exit 1

[[ ${PARALLEL} == '' ]] && echo "Please specify if you want to run in parallel or not." && exit 1



if [[ ${PARALLEL} == "true" ]]; then
    FOREGROUND=''
else
    FOREGROUND='fg'
fi



mkdir -p ${OUTDIR}
OUTDIR=`realpath ${OUTDIR}`

pushd ${INDIR} > /dev/null

for subdir in */; do
    echo -e "${INFO} Entering ${TEXT_DARKGRAY}${subdir}${TEXT_NORMAL}"
    mkdir -p ${OUTDIR}/${subdir}
    
    for svgfile in ${subdir}*.svg; do
        if [[ ${svgfile} == *.drawio.svg ]]; then
            echo -e "\t${INFO} Converting ${TEXT_DARKGRAY}${svgfile}${TEXT_NORMAL} with Draw.io"
            if [ ${OUTPUTFORMAT} == png ]; then
                ${DRAWIO} --export --scale 10 --output ${OUTDIR}/${svgfile}.png ${svgfile} > /dev/null \
                && echo -e "\t${INFO} Converted ${TEXT_DARKGRAY}${svgfile}${TEXT_NORMAL} with Draw.io" \
                & ${FOREGROUND}
            elif  [ ${OUTPUTFORMAT} == eps ]; then
                ${DRAWIO} --export --crop --output ${OUTDIR}/${svgfile}.pdf ${svgfile} > /dev/null \
                && pdftops -eps -r ${DPI} ${OUTDIR}/${svgfile}.pdf \
                && rm ${OUTDIR}/${svgfile}.pdf \
                && echo -e "\t${INFO} Converted ${TEXT_DARKGRAY}${svgfile}${TEXT_NORMAL} with Draw.io" \
                & ${FOREGROUND}
            else
                exit 2
            fi
        else
            echo -e "\t${INFO} Converting ${TEXT_DARKGRAY}${svgfile}${TEXT_NORMAL} with Inkscape"
            inkscape \
                --export-dpi=${DPI} \
                --export-filename=${OUTDIR}/${svgfile}.${OUTPUTFORMAT} \
                ${svgfile} \
                > /dev/null \
            && echo -e "\t${INFO} Converted ${TEXT_DARKGRAY}${svgfile}${TEXT_NORMAL} with Inkscape" \
            & ${FOREGROUND}
        fi
    done
    echo -e "${INFO} Leaving ${TEXT_DARKGRAY}${subdir}${TEXT_NORMAL}"
done
wait

popd > /dev/null
